{"remainingRequest":"C:\\Users\\Renato\\Documents\\thuorProject\\thuor\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Renato\\Documents\\thuorProject\\thuor\\src\\components\\Layout\\Sidebar.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Renato\\Documents\\thuorProject\\thuor\\src\\components\\Layout\\Sidebar.vue","mtime":1543484192000},{"path":"C:\\Users\\Renato\\Documents\\thuorProject\\thuor\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Renato\\Documents\\thuorProject\\thuor\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Renato\\Documents\\thuorProject\\thuor\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Renato\\Documents\\thuorProject\\thuor\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport { mapState } from 'vuex';\nimport SidebarRun from './Sidebar.run.js';\nimport Menu from '../../menu.js';\n\nexport default {\n    name: 'Sidebar',\n    data() {\n        return {\n            Menu,\n            collapse: this.buildCollapseList()\n        }\n    },\n    mounted() {\n        SidebarRun(this.$router)\n    },\n    computed: {\n        ...mapState({\n            showUserBlock: state => state.setting.showUserBlock\n        })\n    },\n    watch:{\n        $route (to, from){\n            this.$store.commit('changeSetting', { name: 'asideToggled', value: false })\n        }\n    },\n    methods: {\n        buildCollapseList() {\n            /** prepare initial state of collapse menus. Doesnt allow same route names */\n            let collapse = {};\n            Menu\n                .filter(({heading}) => !heading)\n                .forEach(({name, path, submenu}) => {\n                    collapse[name] = this.isRouteActive(submenu ? submenu.map(({path})=>path) : path)\n                })\n            return collapse;\n        },\n        getSubRoutes(item) {\n            return item.submenu.map(({path}) => path)\n        },\n        // translate a key or return default values\n        tr (key, defaultValue) {\n            return key ? this.$t(key, {defaultValue: defaultValue}) : defaultValue;\n        },\n        isRouteActive(paths) {\n            paths = Array.isArray(paths) ? paths : [paths];\n            return paths.some(p => this.$route.path.indexOf(p) > -1)\n        },\n        routeActiveClass(paths) {\n            return { 'active': this.isRouteActive(paths) }\n        },\n        toggleItemCollapse(collapseName) {\n            for (let c in this.collapse) {\n                if (this.collapse[c] === true && c !== collapseName)\n                    this.collapse[c] = false\n            }\n            this.collapse[collapseName] = !this.collapse[collapseName]\n        }\n\n    }\n}\n",{"version":3,"sources":["Sidebar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"Sidebar.vue","sourceRoot":"src/components/Layout","sourcesContent":["<template>\r\n    <aside class=\"aside-container\">\r\n        <!-- START Sidebar (left)-->\r\n        <div class=\"aside-inner\">\r\n            <nav class=\"sidebar\" data-sidebar-anyclick-close=\"\">\r\n                <!-- START sidebar nav-->\r\n                <ul class=\"sidebar-nav\">\r\n                    <!-- START user info-->\r\n                    <li class=\"has-user-block\">\r\n                        <b-collapse :visible=\"showUserBlock\" id=\"user-block\">\r\n                            <div class=\"item user-block\">\r\n                                <!-- User picture-->\r\n                                <div class=\"user-block-picture\">\r\n                                    <div class=\"user-block-status\">\r\n                                        <img class=\"img-thumbnail rounded-circle\" src=\"img/user/02.jpg\" alt=\"Avatar\" width=\"60\" height=\"60\">\r\n                                        <div class=\"circle bg-success circle-lg\"></div>\r\n                                    </div>\r\n                                </div>\r\n                                <!-- Name and Job-->\r\n                                <div class=\"user-block-info\">\r\n                                    <span class=\"user-block-name\">Hello, Mike</span>\r\n                                    <span class=\"user-block-role\">Designer</span>\r\n                                </div>\r\n                            </div>\r\n                        </b-collapse>\r\n                    </li>\r\n                    <!-- END user info-->\r\n                    <!-- Iterates over all sidebar items-->\r\n                    <template v-for=\"item in Menu\">\r\n                        <!-- Heading -->\r\n                        <li class=\"nav-heading\" v-if=\"item.heading\">\r\n                            <span>{{$t(item.translate) || item.heading}}</span>\r\n                        </li>\r\n                        <!-- Single Menu -->\r\n                        <router-link tag=\"li\" :to=\"item.path\" active-class=\"active\" v-if=\"!item.heading && !item.submenu\">\r\n                            <a :title=\"tr(item.translate, item.name)\">\r\n                                <span v-if=\"item.label\" :class=\"'float-right badge badge-'+item.label.color\">{{item.label.value}}</span>\r\n                                <em :class=\"item.icon\"></em>\r\n                                <span>{{tr(item.translate, item.name)}}</span>\r\n                            </a>\r\n                        </router-link>\r\n                        <!-- Menu With Subitems -->\r\n                        <li :class=\"routeActiveClass(getSubRoutes(item))\" v-if=\"!item.heading && item.submenu\">\r\n                            <a :title=\"tr(item.translate, item.name)\" @click.prevent=\"toggleItemCollapse(item.name)\" href>\r\n                                <span v-if=\"item.label\" :class=\"'float-right badge badge-'+item.label.color\">{{item.label.value}}</span>\r\n                                <em :class=\"item.icon\"></em>\r\n                                <span>{{tr(item.translate, item.name)}}</span>\r\n                            </a>\r\n                            <b-collapse tag=\"ul\" class=\"sidebar-nav sidebar-subnav\" id=\"item.name\" v-model=\"collapse[item.name]\">\r\n                                <li class=\"sidebar-subnav-header\">{{tr(item.translate, item.name)}}</li>\r\n                                <template v-for=\"sitem in item.submenu\">\r\n                                    <router-link tag=\"li\" :to=\"sitem.path\" active-class=\"active\">\r\n                                        <a :title=\"tr(sitem.translate, sitem.name)\">\r\n                                            <span v-if=\"sitem.label\" :class=\"'float-right badge badge-'+sitem.label.color\">{{sitem.label.value}}</span>\r\n                                            <span>{{tr(sitem.translate, sitem.name)}}</span>\r\n                                        </a>\r\n                                    </router-link>\r\n                                </template>\r\n                            </b-collapse>\r\n                        </li>\r\n                    </template>\r\n                </ul>\r\n                <!-- END sidebar nav-->\r\n            </nav>\r\n        </div>\r\n        <!-- END Sidebar (left)-->\r\n    </aside>\r\n</template>\r\n\r\n<script>\r\n\r\n    import { mapState } from 'vuex';\r\n    import SidebarRun from './Sidebar.run.js';\r\n    import Menu from '../../menu.js';\r\n\r\n    export default {\r\n        name: 'Sidebar',\r\n        data() {\r\n            return {\r\n                Menu,\r\n                collapse: this.buildCollapseList()\r\n            }\r\n        },\r\n        mounted() {\r\n            SidebarRun(this.$router)\r\n        },\r\n        computed: {\r\n            ...mapState({\r\n                showUserBlock: state => state.setting.showUserBlock\r\n            })\r\n        },\r\n        watch:{\r\n            $route (to, from){\r\n                this.$store.commit('changeSetting', { name: 'asideToggled', value: false })\r\n            }\r\n        },\r\n        methods: {\r\n            buildCollapseList() {\r\n                /** prepare initial state of collapse menus. Doesnt allow same route names */\r\n                let collapse = {};\r\n                Menu\r\n                    .filter(({heading}) => !heading)\r\n                    .forEach(({name, path, submenu}) => {\r\n                        collapse[name] = this.isRouteActive(submenu ? submenu.map(({path})=>path) : path)\r\n                    })\r\n                return collapse;\r\n            },\r\n            getSubRoutes(item) {\r\n                return item.submenu.map(({path}) => path)\r\n            },\r\n            // translate a key or return default values\r\n            tr (key, defaultValue) {\r\n                return key ? this.$t(key, {defaultValue: defaultValue}) : defaultValue;\r\n            },\r\n            isRouteActive(paths) {\r\n                paths = Array.isArray(paths) ? paths : [paths];\r\n                return paths.some(p => this.$route.path.indexOf(p) > -1)\r\n            },\r\n            routeActiveClass(paths) {\r\n                return { 'active': this.isRouteActive(paths) }\r\n            },\r\n            toggleItemCollapse(collapseName) {\r\n                for (let c in this.collapse) {\r\n                    if (this.collapse[c] === true && c !== collapseName)\r\n                        this.collapse[c] = false\r\n                }\r\n                this.collapse[collapseName] = !this.collapse[collapseName]\r\n            }\r\n\r\n        }\r\n    }\r\n</script>"]}]}