{"remainingRequest":"C:\\Users\\Renato\\Documents\\thuorProject\\thuor\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Renato\\Documents\\thuorProject\\thuor\\src\\store\\plugins\\setting.js","dependencies":[{"path":"C:\\Users\\Renato\\Documents\\thuorProject\\thuor\\src\\store\\plugins\\setting.js","mtime":1543484192000},{"path":"C:\\Users\\Renato\\Documents\\thuorProject\\thuor\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Renato\\Documents\\thuorProject\\thuor\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Helpers to change class attribute\nvar updateElementClass = function updateElementClass(el, stat, name) {\n  return el && el.classList[stat ? 'add' : 'remove'](name);\n};\n\nvar updateBodyClass = function updateBodyClass(stat, name) {\n  return updateElementClass(document.body, stat, name);\n};\n/*\r\n    When a setting value is changed, detect its value and add/remove\r\n    a classname related with that setting from the target element\r\n*/\n\n\nvar updateClasses = function updateClasses(state) {\n  updateBodyClass(state.setting.isFixed, 'layout-fixed');\n  updateBodyClass(state.setting.isBoxed, 'layout-boxed');\n  updateBodyClass(state.setting.isCollapsed, 'aside-collapsed');\n  updateBodyClass(state.setting.isCollapsedText, 'aside-collapsed-text');\n  updateBodyClass(state.setting.isFloat, 'aside-float');\n  updateBodyClass(state.setting.asideHover, 'aside-hover');\n  updateBodyClass(state.setting.offsidebarOpen, 'offsidebar-open');\n  updateBodyClass(state.setting.asideToggled, 'aside-toggled'); // layout horizontal\n\n  updateBodyClass(state.setting.horizontal, 'layout-h'); // apply change to the sidebar element\n\n  updateElementClass(document.querySelector('.sidebar'), state.setting.asideScrollbar, 'show-scrollbar');\n};\n/*\r\n    Hook into setting changes in order to change layout.\r\n*/\n\n\nvar SettingPlugin = function SettingPlugin(store) {\n  // wait for dom ready\n  document.addEventListener('DOMContentLoaded', function () {\n    return updateClasses(store.state);\n  });\n  store.subscribe(function (mutation, state) {\n    if (mutation.type === 'changeSetting' || mutation.type === 'toggleSetting') {\n      updateClasses(state);\n    }\n  });\n};\n\nexport default SettingPlugin;",{"version":3,"sources":["C:/Users/Renato/Documents/thuorProject/thuor/src/store/plugins/setting.js"],"names":["updateElementClass","el","stat","name","classList","updateBodyClass","document","body","updateClasses","state","setting","isFixed","isBoxed","isCollapsed","isCollapsedText","isFloat","asideHover","offsidebarOpen","asideToggled","horizontal","querySelector","asideScrollbar","SettingPlugin","store","addEventListener","subscribe","mutation","type"],"mappings":"AACA;AACA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,EAAD,EAAKC,IAAL,EAAWC,IAAX;AAAA,SAAoBF,EAAE,IAAIA,EAAE,CAACG,SAAH,CAAaF,IAAI,GAAG,KAAH,GAAW,QAA5B,EAAsCC,IAAtC,CAA1B;AAAA,CAA3B;;AACA,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACH,IAAD,EAAOC,IAAP;AAAA,SAAgBH,kBAAkB,CAACM,QAAQ,CAACC,IAAV,EAAgBL,IAAhB,EAAsBC,IAAtB,CAAlC;AAAA,CAAxB;AAEA;;;;;;AAIA,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK,EAAI;AAC3BJ,EAAAA,eAAe,CAACI,KAAK,CAACC,OAAN,CAAcC,OAAf,EAAwB,cAAxB,CAAf;AACAN,EAAAA,eAAe,CAACI,KAAK,CAACC,OAAN,CAAcE,OAAf,EAAwB,cAAxB,CAAf;AACAP,EAAAA,eAAe,CAACI,KAAK,CAACC,OAAN,CAAcG,WAAf,EAA4B,iBAA5B,CAAf;AACAR,EAAAA,eAAe,CAACI,KAAK,CAACC,OAAN,CAAcI,eAAf,EAAgC,sBAAhC,CAAf;AACAT,EAAAA,eAAe,CAACI,KAAK,CAACC,OAAN,CAAcK,OAAf,EAAwB,aAAxB,CAAf;AACAV,EAAAA,eAAe,CAACI,KAAK,CAACC,OAAN,CAAcM,UAAf,EAA2B,aAA3B,CAAf;AACAX,EAAAA,eAAe,CAACI,KAAK,CAACC,OAAN,CAAcO,cAAf,EAA+B,iBAA/B,CAAf;AACAZ,EAAAA,eAAe,CAACI,KAAK,CAACC,OAAN,CAAcQ,YAAf,EAA6B,eAA7B,CAAf,CAR2B,CAS3B;;AACAb,EAAAA,eAAe,CAACI,KAAK,CAACC,OAAN,CAAcS,UAAf,EAA2B,UAA3B,CAAf,CAV2B,CAW3B;;AACAnB,EAAAA,kBAAkB,CAACM,QAAQ,CAACc,aAAT,CAAuB,UAAvB,CAAD,EAAqCX,KAAK,CAACC,OAAN,CAAcW,cAAnD,EAAmE,gBAAnE,CAAlB;AACH,CAbD;AAeA;;;;;AAGA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK,EAAI;AAC3B;AACAjB,EAAAA,QAAQ,CAACkB,gBAAT,CAA0B,kBAA1B,EAA8C;AAAA,WAAMhB,aAAa,CAACe,KAAK,CAACd,KAAP,CAAnB;AAAA,GAA9C;AAEAc,EAAAA,KAAK,CAACE,SAAN,CAAgB,UAACC,QAAD,EAAWjB,KAAX,EAAqB;AACjC,QAAIiB,QAAQ,CAACC,IAAT,KAAkB,eAAlB,IAAqCD,QAAQ,CAACC,IAAT,KAAkB,eAA3D,EAA4E;AACxEnB,MAAAA,aAAa,CAACC,KAAD,CAAb;AACH;AACJ,GAJD;AAKH,CATD;;AAWA,eAAea,aAAf","sourcesContent":["\r\n// Helpers to change class attribute\r\nconst updateElementClass = (el, stat, name) => el && el.classList[stat ? 'add' : 'remove'](name)\r\nconst updateBodyClass = (stat, name) => updateElementClass(document.body, stat, name)\r\n\r\n/*\r\n    When a setting value is changed, detect its value and add/remove\r\n    a classname related with that setting from the target element\r\n*/\r\nconst updateClasses = state => {\r\n    updateBodyClass(state.setting.isFixed, 'layout-fixed')\r\n    updateBodyClass(state.setting.isBoxed, 'layout-boxed')\r\n    updateBodyClass(state.setting.isCollapsed, 'aside-collapsed')\r\n    updateBodyClass(state.setting.isCollapsedText, 'aside-collapsed-text')\r\n    updateBodyClass(state.setting.isFloat, 'aside-float')\r\n    updateBodyClass(state.setting.asideHover, 'aside-hover')\r\n    updateBodyClass(state.setting.offsidebarOpen, 'offsidebar-open')\r\n    updateBodyClass(state.setting.asideToggled, 'aside-toggled')\r\n    // layout horizontal\r\n    updateBodyClass(state.setting.horizontal, 'layout-h')\r\n    // apply change to the sidebar element\r\n    updateElementClass(document.querySelector('.sidebar'), state.setting.asideScrollbar, 'show-scrollbar')\r\n}\r\n\r\n/*\r\n    Hook into setting changes in order to change layout.\r\n*/\r\nconst SettingPlugin = store => {\r\n    // wait for dom ready\r\n    document.addEventListener('DOMContentLoaded', () => updateClasses(store.state));\r\n\r\n    store.subscribe((mutation, state) => {\r\n        if (mutation.type === 'changeSetting' || mutation.type === 'toggleSetting') {\r\n            updateClasses(state)\r\n        }\r\n    })\r\n}\r\n\r\nexport default SettingPlugin;"]}]}