{"remainingRequest":"C:\\Users\\Renato\\Documents\\thuorProject\\thuor\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Renato\\Documents\\thuorProject\\thuor\\src\\store\\modules\\setting.js","dependencies":[{"path":"C:\\Users\\Renato\\Documents\\thuorProject\\thuor\\src\\store\\modules\\setting.js","mtime":1543484192000},{"path":"C:\\Users\\Renato\\Documents\\thuorProject\\thuor\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Renato\\Documents\\thuorProject\\thuor\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n\n/**\r\n * Setting store to control layout behavior\r\n */\nvar SettingModule = {\n  state: {\n    /* Layout fixed. Scroll content only */\n    isFixed: true,\n\n    /* Sidebar collapsed */\n    isCollapsed: false,\n\n    /* Boxed layout */\n    isBoxed: false,\n\n    /* Floating sidebar */\n    isFloat: false,\n\n    /* Sidebar show menu on hover only */\n    asideHover: false,\n\n    /* Show sidebar scrollbar (dont' hide it) */\n    asideScrollbar: false,\n\n    /* Sidebar collapsed with big icons and text */\n    isCollapsedText: false,\n\n    /* Toggle for the offsidebar */\n    offsidebarOpen: false,\n\n    /* Toggle for the sidebar offcanvas (mobile) */\n    asideToggled: false,\n\n    /* Toggle for the sidebar user block */\n    showUserBlock: false,\n\n    /* Enables layout horizontal */\n    horizontal: false,\n\n    /* Full size layout */\n    useFullLayout: false,\n\n    /* Hide footer */\n    hiddenFooter: false\n  },\n  getters: {\n    getSetting: function getSetting(state) {\n      return state;\n    }\n  },\n  mutations: {\n    /**\r\n     * Toggle a setting value (only boolean)\r\n     */\n    toggleSetting: function toggleSetting(state, name) {\n      if (name in state) state[name] = !state[name];\n    },\n\n    /**\r\n     * Change a setting value\r\n     * payload.name: name of the setting prop to change\r\n     * payload.value: new value to apply\r\n     */\n    changeSetting: function changeSetting(state, _ref) {\n      var name = _ref.name,\n          value = _ref.value;\n      if (name in state) state[name] = value;\n    }\n  },\n  actions: {}\n};\nexport default SettingModule;",{"version":3,"sources":["C:/Users/Renato/Documents/thuorProject/thuor/src/store/modules/setting.js"],"names":["SettingModule","state","isFixed","isCollapsed","isBoxed","isFloat","asideHover","asideScrollbar","isCollapsedText","offsidebarOpen","asideToggled","showUserBlock","horizontal","useFullLayout","hiddenFooter","getters","getSetting","mutations","toggleSetting","name","changeSetting","value","actions"],"mappings":";;AAAA;;;AAGA,IAAMA,aAAa,GAAG;AAClBC,EAAAA,KAAK,EAAE;AACH;AACAC,IAAAA,OAAO,EAAE,IAFN;;AAGH;AACAC,IAAAA,WAAW,EAAE,KAJV;;AAKH;AACAC,IAAAA,OAAO,EAAE,KANN;;AAOH;AACAC,IAAAA,OAAO,EAAE,KARN;;AASH;AACAC,IAAAA,UAAU,EAAE,KAVT;;AAWH;AACAC,IAAAA,cAAc,EAAE,KAZb;;AAaH;AACAC,IAAAA,eAAe,EAAE,KAdd;;AAeH;AACAC,IAAAA,cAAc,EAAE,KAhBb;;AAiBH;AACAC,IAAAA,YAAY,EAAE,KAlBX;;AAmBH;AACAC,IAAAA,aAAa,EAAE,KApBZ;;AAqBH;AACAC,IAAAA,UAAU,EAAE,KAtBT;;AAuBH;AACAC,IAAAA,aAAa,EAAE,KAxBZ;;AAyBH;AACAC,IAAAA,YAAY,EAAE;AA1BX,GADW;AA6BlBC,EAAAA,OAAO,EAAE;AACLC,IAAAA,UADK,sBACMf,KADN,EACa;AACd,aAAOA,KAAP;AACH;AAHI,GA7BS;AAkClBgB,EAAAA,SAAS,EAAE;AACP;;;AAGAC,IAAAA,aAJO,yBAIOjB,KAJP,EAIckB,IAJd,EAIoB;AACvB,UAAGA,IAAI,IAAIlB,KAAX,EACIA,KAAK,CAACkB,IAAD,CAAL,GAAc,CAAClB,KAAK,CAACkB,IAAD,CAApB;AACP,KAPM;;AAQP;;;;;AAKAC,IAAAA,aAbO,yBAaOnB,KAbP,QAa6B;AAAA,UAAdkB,IAAc,QAAdA,IAAc;AAAA,UAARE,KAAQ,QAARA,KAAQ;AAChC,UAAGF,IAAI,IAAIlB,KAAX,EACIA,KAAK,CAACkB,IAAD,CAAL,GAAcE,KAAd;AACP;AAhBM,GAlCO;AAoDlBC,EAAAA,OAAO,EAAE;AApDS,CAAtB;AAwDA,eAAetB,aAAf","sourcesContent":["/**\r\n * Setting store to control layout behavior\r\n */\r\nconst SettingModule = {\r\n    state: {\r\n        /* Layout fixed. Scroll content only */\r\n        isFixed: true,\r\n        /* Sidebar collapsed */\r\n        isCollapsed: false,\r\n        /* Boxed layout */\r\n        isBoxed: false,\r\n        /* Floating sidebar */\r\n        isFloat: false,\r\n        /* Sidebar show menu on hover only */\r\n        asideHover: false,\r\n        /* Show sidebar scrollbar (dont' hide it) */\r\n        asideScrollbar: false,\r\n        /* Sidebar collapsed with big icons and text */\r\n        isCollapsedText: false,\r\n        /* Toggle for the offsidebar */\r\n        offsidebarOpen: false,\r\n        /* Toggle for the sidebar offcanvas (mobile) */\r\n        asideToggled: false,\r\n        /* Toggle for the sidebar user block */\r\n        showUserBlock: false,\r\n        /* Enables layout horizontal */\r\n        horizontal: false,\r\n        /* Full size layout */\r\n        useFullLayout: false,\r\n        /* Hide footer */\r\n        hiddenFooter: false\r\n    },\r\n    getters: {\r\n        getSetting(state) {\r\n            return state;\r\n        }\r\n    },\r\n    mutations: {\r\n        /**\r\n         * Toggle a setting value (only boolean)\r\n         */\r\n        toggleSetting(state, name) {\r\n            if(name in state)\r\n                state[name] = !state[name];\r\n        },\r\n        /**\r\n         * Change a setting value\r\n         * payload.name: name of the setting prop to change\r\n         * payload.value: new value to apply\r\n         */\r\n        changeSetting(state, {name, value}) {\r\n            if(name in state)\r\n                state[name] = value;\r\n        }\r\n    },\r\n    actions: {\r\n    }\r\n}\r\n\r\nexport default SettingModule"]}]}