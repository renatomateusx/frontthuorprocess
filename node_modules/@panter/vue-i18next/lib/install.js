'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Vue = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /* eslint-disable import/no-mutable-exports */


exports.install = install;

var _deepmerge = require('deepmerge');

var _deepmerge2 = _interopRequireDefault(_deepmerge);

var _component = require('./component');

var _component2 = _interopRequireDefault(_component);

var _directive = require('./directive');

var _directive2 = _interopRequireDefault(_directive);

var _wait = require('./wait');

var _wait2 = _interopRequireDefault(_wait);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var Vue = exports.Vue = void 0;

function install(_Vue) {
  if (install.installed) {
    return;
  }
  install.installed = true;

  exports.Vue = Vue = _Vue;

  var getByKey = function getByKey(i18nOptions, i18nextOptions) {
    return function (key) {
      if (i18nOptions && i18nOptions.keyPrefix && !key.includes(i18nextOptions.nsSeparator)) {
        return i18nOptions.keyPrefix + '.' + key;
      }
      return key;
    };
  };

  var getComponentNamespace = function getComponentNamespace(vm) {
    var namespace = vm.$options.name || vm.$options._componentTag;
    if (namespace) {
      return {
        namespace: namespace,
        loadNamespace: true
      };
    }

    return {
      namespace: '' + Math.random()
    };
  };

  Vue.mixin({
    beforeCreate: function beforeCreate() {
      var _this = this;

      var options = this.$options;
      if (options.i18n) {
        this._i18n = options.i18n;
      } else if (options.parent && options.parent.$i18n) {
        this._i18n = options.parent.$i18n;
      }
      var inlineTranslations = {};

      if (this._i18n) {
        var getNamespace = this._i18n.options.getComponentNamespace || getComponentNamespace;

        var _getNamespace = getNamespace(this),
            namespace = _getNamespace.namespace,
            loadNamespace = _getNamespace.loadNamespace;

        if (options.__i18n) {
          options.__i18n.forEach(function (resource) {
            inlineTranslations = (0, _deepmerge2.default)(inlineTranslations, JSON.parse(resource));
          });
        }

        if (options.i18nOptions) {
          var _$options$i18nOptions = this.$options.i18nOptions,
              _$options$i18nOptions2 = _$options$i18nOptions.lng,
              lng = _$options$i18nOptions2 === undefined ? null : _$options$i18nOptions2,
              _$options$i18nOptions3 = _$options$i18nOptions.keyPrefix,
              keyPrefix = _$options$i18nOptions3 === undefined ? null : _$options$i18nOptions3,
              messages = _$options$i18nOptions.messages;
          var namespaces = this.$options.i18nOptions.namespaces;

          namespaces = namespaces || this._i18n.i18next.options.defaultNS;

          if (typeof namespaces === 'string') namespaces = [namespaces];
          var namespacesToLoad = namespaces.concat([namespace]);

          if (messages) {
            inlineTranslations = (0, _deepmerge2.default)(inlineTranslations, messages);
          }

          this._i18nOptions = { lng: lng, namespaces: namespacesToLoad, keyPrefix: keyPrefix };
          this._i18n.i18next.loadNamespaces(namespaces);
        } else if (options.parent && options.parent._i18nOptions) {
          this._i18nOptions = _extends({}, options.parent._i18nOptions);
          this._i18nOptions.namespaces = [namespace].concat(_toConsumableArray(this._i18nOptions.namespaces));
        } else if (options.__i18n) {
          this._i18nOptions = { namespaces: [namespace] };
        }

        if (loadNamespace && this._i18n.options.loadComponentNamespace) {
          this._i18n.i18next.loadNamespaces([namespace]);
        }

        var languages = Object.keys(inlineTranslations);
        languages.forEach(function (lang) {
          _this._i18n.i18next.addResourceBundle(lang, namespace, _extends({}, inlineTranslations[lang]), true, false);
        });
      }

      var getKey = getByKey(this._i18nOptions, this._i18n ? this._i18n.i18next.options : {});

      if (this._i18nOptions && this._i18nOptions.namespaces) {
        var _i18nOptions = this._i18nOptions,
            _lng = _i18nOptions.lng,
            _namespaces = _i18nOptions.namespaces;


        var fixedT = this._i18n.i18next.getFixedT(_lng, _namespaces);
        this._getI18nKey = function (key, i18nextOptions) {
          return fixedT(getKey(key), i18nextOptions, _this._i18n.i18nLoadedAt);
        };
      } else {
        this._getI18nKey = function (key, i18nextOptions) {
          return _this._i18n.t(getKey(key), i18nextOptions, _this._i18n.i18nLoadedAt);
        };
      }
    }
  });

  // extend Vue.js
  Object.defineProperty(Vue.prototype, '$i18n', {
    get: function get() {
      return this._i18n;
    }
  });

  Vue.prototype.$t = function t(key, options) {
    return this._getI18nKey(key, options);
  };

  Vue.component(_component2.default.name, _component2.default);
  Vue.directive('t', _directive2.default);
  Vue.directive('waitForT', _wait2.default);
}