'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = {
  name: 'i18next',
  functional: true,
  props: {
    tag: {
      type: String,
      default: 'span'
    },
    path: {
      type: String,
      required: true
    },
    options: {
      type: Object
    }
  },
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children,
        parent = _ref.parent;

    var i18next = parent.$i18n;
    if (!i18next) {
      return h(props.tag, data, children);
    }

    var path = props.path;
    var options = props.options || {};

    var REGEXP = i18next.i18next.services.interpolator.regexp;
    var format = i18next.t(path, _extends({}, options, { interpolation: { prefix: '#$?', suffix: '?$#' } }));
    var tchildren = [];

    format.split(REGEXP).reduce(function (memo, match, index) {
      var child = void 0;
      if (index % 2 === 0) {
        if (match.length === 0) return memo;

        child = match;
      } else {
        var place = match.trim();
        if (isNaN(parseFloat(place)) || !isFinite(place)) {
          children.forEach(function (e) {
            if (!child && e.data.attrs && e.data.attrs.place && e.data.attrs.place === place) {
              child = e;
            }
          });
        } else {
          child = children[parseInt(match, 10)];
        }
      }

      memo.push(child);
      return memo;
    }, tchildren);

    return h(props.tag, data, tchildren);
  }
};
module.exports = exports['default'];